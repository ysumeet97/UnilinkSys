package controller;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.InputMismatchException;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Alert;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import model.Exceptions.DatabaseException;
import model.FileHandling.ExportData;
import model.FileHandling.ImportData;
import view.UnilinkGUI;

/**
 * Controller for Handling the Import export events
 * 
 * @author sumeet
 *
 */
public class FileController {
	/**
	 * This method handles the event generated by import Button
	 * 
	 * @param stage
	 * @return
	 */
	public static EventHandler<ActionEvent> importDataHandler(Stage stage){
		return new EventHandler<ActionEvent>(){
			@Override
			public void handle(ActionEvent event) {
				FileChooser fileChooser = new FileChooser();
				fileChooser.setInitialDirectory(new File("files"));
				FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
				fileChooser.getExtensionFilters().add(extFilter);
				File selectedDirectory = fileChooser.showOpenDialog(stage);
				if (selectedDirectory != null && selectedDirectory.exists()) {
					String cwd = System.getProperty("user.dir");
					String path = new File(cwd).toURI().relativize(selectedDirectory.toURI()).getPath();
					if (path != null && !path.isEmpty()) {
						try {
							ImportData impData = new ImportData();
							impData.fileToObjects(path);
							Alert success = AlertController.pushAlerts("INFO", "Imported Data from file successfully!");
							success.showAndWait();
							if(!success.isShowing()) {
								UnilinkGUI.refreshContent();
							}
						} catch (IOException | InputMismatchException | NumberFormatException | ClassNotFoundException | SQLException | DatabaseException  e) {
							Alert exceptionAlert = AlertController.pushAlerts("ERROR", "FILE_IMPORT_FAILED: " + e.toString());
							exceptionAlert.show();
						}
					} else {
						Alert invalidAlert = AlertController.pushAlerts("ERROR", "FILE_IMPORT_FAILED_INV_FILE");
						invalidAlert.show();
					}
				}
			}
		};
	}
	
	/**
	 * This method handles the event generated by export Button
	 * 
	 * @param stage
	 * @return
	 */
	public static EventHandler<ActionEvent> exportDataHandler(Stage stage){
		return new EventHandler<ActionEvent>(){
			@Override
			public void handle(ActionEvent event) {
				DirectoryChooser directoryChooser = new DirectoryChooser();
				directoryChooser.setInitialDirectory(new File("files"));
				File selectedDirectory = directoryChooser.showDialog(stage);
				if (selectedDirectory != null && selectedDirectory.exists()) {
					String cwd = System.getProperty("user.dir");
					String path = new File(cwd).toURI().relativize(selectedDirectory.toURI()).getPath();
					if (path != null && !path.isEmpty()) {
						try {
							ExportData expData = new ExportData();
							expData.objectsToFile(path);
							Alert success = AlertController.pushAlerts("INFO", "Exported Data to file successfully!");
							success.show();
						} catch (IOException ioe) {
							Alert exceptionAlert = AlertController.pushAlerts("ERROR","FILE_EXPORT_FAILED: " + ioe.toString());
							exceptionAlert.show();
						}
					}else {
						Alert invalidAlert = AlertController.pushAlerts("ERROR", "FILE_IMPORT_FAILED_INV_FILE");
						invalidAlert.show();
					}
				}
			}
		};
	}

}
